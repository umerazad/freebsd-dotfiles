" Don't use Ex mode, use Q for formatting
map Q gq

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Set up tabbing through tags a bit easier
nm <C-Tab> :tn<CR>
nm <C-S-Tab> :tp<CR>

" Add the local directory's tag files
let tag_dir=getcwd()
if match(tag_dir, "^/") == 0
        let end_dir='/'
        while !filereadable(tag_dir."/tags") && tag_dir!=$HOME && tag_dir!=end_dir
                let tag_dir = substitute(tag_dir, '/[^/]\+$', "", "")
        endwhile
        if filereadable(tag_dir."/tags")
                exe "set tags+=".tag_dir."/tags"
        endif
elseif match(tag_dir, "^[a-zA-Z]:[\\/]") == 0
        let end_dir=tag_dir[0].tag_dir[1]
        while !filereadable(tag_dir."\\tags") && tag_dir!=end_dir
                let tag_dir = substitute(tag_dir, '\\[^\\]\+$', "", "")
        endwhile
        if filereadable(tag_dir."\\tags")
                exe "set tags+=".tag_dir."\\tags"
        endif
endif

set tags+=tags;

" Fix the bug where gVim gets confused in vertical splits
set guioptions+=lr

" Load our local file
"source ~/.vimrc_local


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Get out of VI's compatible mode..
set nocompatible

"Set shell to be bash
"if MySys() == "linux" || MySys() == "mac"
"  set shell=bash
"else
"  set shell=C:\cygwin\bin\sh
"endif

"Sets how many lines of history VIM har to remember
set history=400


"Set to auto read when a file is changed from the outside
"set autoread

"Have the mouse enabled all the time:
set mouse=a

"Set mapleader
let mapleader = ","
let g:mapleader = ","

"Fast saving
nmap <leader>w :w!<cr>
nmap <leader>f :e ~/buffer<cr>
map <leader>s :source ~/.vimrc<cr>
map <leader>e :e! ~/.vimrc<cr>
autocmd! bufwritepost vimrc source ~/.vimrc

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Enable syntax hl
syntax enable

"Set font to Monaco 10pt
set guifont=Courier:h12

if has("gui_running")
  set guioptions-=T
  set guioptions-=m
  set background=dark
  let psc_style='cool'
  colorscheme koehler
else
  set background=dark
  colorscheme desert
endif

"Some nice mapping to switch syntax (useful if one mixes different languages in one file)
"map <leader>1 :set syntax=cheetah<cr>
"map <leader>2 :set syntax=xhtml<cr>
"map <leader>3 :set syntax=python<cr>
"map <leader>4 :set ft=javascript<cr>
map <leader>$ :syntax sync fromstart<cr>

autocmd BufEnter * :syntax sync fromstart

"Highlight current
if has("gui_running")
  set cursorline
  hi cursorline guibg=#282828
  hi CursorColumn guibg=#282828
endif

"Omni menu colors
hi Pmenu guibg=#333333
hi PmenuSel guibg=#555555 guifg=#ffffff

"Pattern matching
hi MatchParen guifg=#000000 guibg=#D0D090


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Fileformats
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Favorite filetypes
set ffs=unix,dos,mac

nmap <leader>fd :se ff=dos<cr>
nmap <leader>fu :se ff=unix<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM userinterface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Set 7 lines to the curors - when moving vertical..
set so=7

"Turn on WiLd menu
set wildmenu

"Always show current position
set ruler

"The commandbar is 2 high
set cmdheight=1

"Show line number
"set nu

"Do not redraw, when running macros.. lazyredraw
set lz

"Change buffer - without saving
set hid

"Set backspace
set backspace=eol,start,indent

"Bbackspace and cursor keys wrap to
set whichwrap+=<,>,h,l

"Ignore case when searching
set ignorecase
set incsearch

"Set magic on
set magic

"No sound on errors.
set noerrorbells
set novisualbell
set t_vb=

"show matching bracets
set showmatch

"How many tenths of a second to blink
set mat=2

"Highlight search things
set nohlsearch

  """"""""""""""""""""""""""""""
  " => Statusline
  """"""""""""""""""""""""""""""
  "Always hide the statusline
  set laststatus=2

  function! CurDir()
     let curdir = substitute(getcwd(), '/Users/Umer/', "~/", "g")
     return curdir
  endfunction

  "Format the statusline
  set statusline=\ %F%m%r%h\ %w\ \ CWD:\ %r%{CurDir()}%h\ \ \ Line:\ %l/%L\ \ Column:\ %c/%v



""""""""""""""""""""""""""""""
" => Visual
""""""""""""""""""""""""""""""
" From an idea by Michael Naumann
function! VisualSearch(direction) range
  let l:saved_reg = @"
  execute "normal! vgvy"
  let l:pattern = escape(@", '\\/.*$^~[]')
  let l:pattern = substitute(l:pattern, "\n$", "", "")
  if a:direction == 'b'
    execute "normal ?" . l:pattern . "^M"
  else
    execute "normal /" . l:pattern . "^M"
  endif
  let @/ = l:pattern
  let @" = l:saved_reg
endfunction

"Basically you press * or # to search for the current selection !! Really useful
vnoremap <silent> * :call VisualSearch('f')<CR>
vnoremap <silent> # :call VisualSearch('b')<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around and tabs
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Map space to / and c-space to ?
map <space> /
map <c-space> ?

"Smart way to move btw. windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

"Actually, the tab does not switch buffers, but my arrows
"Bclose function ca be found in "Buffer related" section
map <leader>bd :Bclose<cr>
"map <down> <leader>bd
"Use the arrows to something usefull
"map <right> :bn<cr>
"map <left> :bp<cr>

"Tab configuration
map <leader>tn :tabnew %<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
try
  set switchbuf=usetab
  set stal=2
catch
endtry

"Moving fast to front, back and 2 sides ;)
"imap <m-$> <esc>$a
"imap <m-0> <esc>0i
"imap <D-$> <esc>$a
"imap <D-0> <esc>0i


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General Autocommands
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Switch to current dir
map <leader>cd :cd %:p:h<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Parenthesis/bracket expanding
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"vnoremap $1 <esc>`>a)<esc>`<i(<esc>
"")
"vnoremap $2 <esc>`>a]<esc>`<i[<esc>
"vnoremap $3 <esc>`>a}<esc>`<i{<esc>
"vnoremap $$ <esc>`>a"<esc>`<i"<esc>
"vnoremap $q <esc>`>a'<esc>`<i'<esc>
"vnoremap $w <esc>`>a"<esc>`<i"<esc>

""Map auto complete of (, ", ', [
"inoremap $1 ()<esc>:let leavechar=")"<cr>i
"inoremap $2 []<esc>:let leavechar="]"<cr>i
"inoremap $4 {<esc>o}<esc>:let leavechar="}"<cr>O
"inoremap $3 {}<esc>:let leavechar="}"<cr>i
"inoremap $q ''<esc>:let leavechar="'"<cr>i
"inoremap $w ""<esc>:let leavechar='"'<cr>i
"au BufNewFile,BufRead *.\(vim\)\@! inoremap " ""<esc>:let leavechar='"'<cr>i
"au BufNewFile,BufRead *.\(txt\)\@! inoremap ' ''<esc>:let leavechar="'"<cr>i

"imap <m-l> <esc>:exec "normal f" . leavechar<cr>a
"imap <d-l> <esc>:exec "normal f" . leavechar<cr>a


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings etc.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Remap VIM 0
"map 0 ^

"Move a line of text using control
"nmap <M-j> mz:m+<cr>`z
"nmap <M-k> mz:m-2<cr>`z
"vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
"vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Command-line config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
func! Cwd()
  let cwd = getcwd()
  return "e " . cwd
endfunc

func! DeleteTillSlash()
  let g:cmd = getcmdline()
  if MySys() == "linux" || MySys() == "mac"
    let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*", "\\1", "")
  else
    let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\]\\).*", "\\1", "")
  endif
  if g:cmd == g:cmd_edited
    if MySys() == "linux" || MySys() == "mac"
      let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*/", "\\1", "")
    else
      let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\\]\\).*\[\\\\\]", "\\1", "")
    endif
  endif
  return g:cmd_edited
endfunc

func! CurrentFileDir(cmd)
  return a:cmd . " " . expand("%:p:h") . "/"
endfunc

"Smart mappings on the command line
cno $h e ~/
cno $d e ~/Desktop/
cno $$ e ./

cno $q <C-\>eDeleteTillSlash()<cr>

cno $c e <C-\>eCurrentFileDir("e")<cr>

cno $tc <C-\>eCurrentFileDir("tabnew")<cr>
cno $th tabnew ~/
cno $td tabnew ~/Desktop/

"Bash like
cnoremap <C-A>		<Home>
cnoremap <C-E>		<End>
cnoremap <C-K>		<C-U>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Buffer realted
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Fast open a buffer by search for a name
map <c-q> :sb

"Open a dummy buffer for paste
map <leader>q <c-w> s :e ~/buffer

"Restore cursor to file position in previous editing session
set viminfo='10,\"100,:20,%,n~/.viminfo

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()

function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files and backups
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Turn backup off
set nobackup
set nowb
set noswapfile
set noar


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Folding
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Enable folding, I find it very useful
set fen
set fdl=0


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set expandtab
"set softtabstop=2
"set tabstop=2
"set backspace=2
set shiftwidth=4
set smarttab
set lbr
set tw=500
set nu
set tabstop=4
set expandtab
"set guifont=Courier_New:h10:cANSI

   """"""""""""""""""""""""""""""
   " => Indent
   """"""""""""""""""""""""""""""
   "Auto indent
   set ai

   "Smart indet
   set si

   "C-style indeting
   set cindent

   "Wrap lines
   set wrap



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=


   """"""""""""""""""""""""""""""
   " => Python section
   """"""""""""""""""""""""""""""
   "Run the current buffer in python - ie. on leader+space
   au BufNewFile,BufRead *.py so $VIMRUNTIME/syntax/python.vim
   autocmd BufNewFile,BufRead *.py map <buffer> <leader><space> :w!<cr>:!python %<cr>
   autocmd BufNewFile,BufRead *.py so $VIMRUNTIME/plugin/python_fold.vim

   "Set some bindings up for 'compile' of python
   autocmd BufNewFile,BufRead *.py set makeprg=python\ -c\ \"import\ py_compile,sys;\ sys.stderr=sys.stdout;\ py_compile.compile(r'%')\"
   autocmd BufNewFile,BufRead *.py set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m
   autocmd BufNewFile,BufRead *.py nmap <buffer> <F8> :w!<cr>:make<cr>

   "Python iMaps
   au BufNewFile,BufRead *.py set cindent
   au BufNewFile,BufRead *.py inoremap <buffer> $r return
   au BufNewFile,BufRead *.py inoremap <buffer> $s self
   au BufNewFile,BufRead *.py inoremap <buffer> $c ##<cr>#<space><cr>#<esc>kla
   au BufNewFile,BufRead *.py inoremap <buffer> $i import
   au BufNewFile,BufRead *.py inoremap <buffer> $p print
   au BufNewFile,BufRead *.py inoremap <buffer> $d """<cr>"""<esc>O

   "Run in the Python interpreter
   function! Python_Eval_VSplit() range
     let src = tempname()
     let dst = tempname()
     execute ": " . a:firstline . "," . a:lastline . "w " . src
     execute ":!python " . src . " > " . dst
     execute ":pedit! " . dst
   endfunction
   au BufNewFile,BufRead *.py vmap <F7> :call Python_Eval_VSplit()<cr>

   """""""""""""""""""""""""""""""
   " => Java section
   """""""""""""""""""""""""""""""
   autocmd BufNewFile,BufRead *.java compiler ant
   autocmd BufNewFile,BufRead *.java map <buffer> <F8> :make

   "Java iMaps
   au BufNewFile,BufRead *.java :inoremap <buffer> <C-t> System.out.println();<esc>hi

   "Java comments
   autocmd FileType java let b:jcommenter_class_author='Muhammad Umer Azad (umerazad@microsoft.com)'
   autocmd FileType java let b:jcommenter_file_author='Muhammad Umer Azad (umerazad@microsoft.com)'
   autocmd BufNewFile,BufRead *.java source ~/vim_local/macros/jcommenter.vim
   autocmd BufNewFile,BufRead *.java map <buffer> <F2> :call JCommentWriter()<cr>

   "Abbr'z
   autocmd BufNewFile,BufRead *.java inoremap <buffer> $m public static void main(String[] args) {<cr>}<esc>O<Space>
   autocmd BufNewFile,BufRead *.java inoremap <buffer> $c public class {<cr>}<esc>k$hi<space>
   autocmd BufNewFile,BufRead *.java inoremap <buffer> $pr private
   autocmd BufNewFile,BufRead *.java inoremap <buffer> $r return
   autocmd BufNewFile,BufRead *.java inoremap <buffer> $pu public
   autocmd BufNewFile,BufRead *.java inoremap <buffer> $i import
   autocmd BufNewFile,BufRead *.java inoremap <buffer> $b boolean
   autocmd BufNewFile,BufRead *.java inoremap <buffer> $v void
   autocmd BufNewFile,BufRead *.java inoremap <buffer> $s String

   """"""""""""""""""""""""""""""
   " => JavaScript section
   """""""""""""""""""""""""""""""
   au BufNewFile,BufRead *.js so ~/vim_local/syntax/javascript.vim
   function! JavaScriptFold()
     set foldmethod=marker
     set foldmarker={,}
     set foldtext=getline(v:foldstart)
   endfunction
   au BufNewFile,BufRead *.js call JavaScriptFold()
   au BufNewFile,BufRead *.js imap <c-t> console.log();<esc>hi
   au BufNewFile,BufRead *.js imap <c-a> alert();<esc>hi
   au BufNewFile,BufRead *.js set nocindent
   au BufNewFile,BufRead *.js inoremap <buffer> $r return

   au BufNewFile,BufRead *.js inoremap <buffer> $d //<cr>//<cr>//<esc>ka<space>
   au BufNewFile,BufRead *.js inoremap <buffer> $c /**<cr><space><cr>**/<esc>ka


   """"""""""""""""""""""""""""""
   " => C mappings
   """""""""""""""""""""""""""""""
   autocmd BufNewFile,BufRead *.c map <buffer> <leader><space> :w<cr>:!gcc %<cr>
   autocmd BufNewFile,BufRead *.c map <buffer> <F8> :!./a.out<cr>


""""""""""""""""""""""""""""""
" => Snippets
"""""""""""""""""""""""""""""""
   "You can use <c-j> to goto the next <++> - it is pretty smart ;)

   """""""""""""""""""""""""""""""
   " => Python
   """""""""""""""""""""""""""""""
   autocmd BufNewFile,BufRead *.py inorea <buffer> cfun <c-r>=IMAP_PutTextWithMovement("def <++>(<++>):\n<++>\nreturn <++>")<cr>
   autocmd BufRead,BufNewFile *.py inorea <buffer> cclass <c-r>=IMAP_PutTextWithMovement("class <++>:\n<++>")<cr>
   autocmd BufRead,BufNewFile *.py inorea <buffer> cfor <c-r>=IMAP_PutTextWithMovement("for <++> in <++>:\n<++>")<cr>
   autocmd BufRead,BufNewFile *.py inorea <buffer> cif <c-r>=IMAP_PutTextWithMovement("if <++>:\n<++>")<cr>
   autocmd BufRead,BufNewFile *.py inorea <buffer> cifelse <c-r>=IMAP_PutTextWithMovement("if <++>:\n<++>\nelse:\n<++>")<cr>


   """""""""""""""""""""""""""""""
   " => JavaScript
   """""""""""""""""""""""""""""""
   autocmd BufRead,BufNewFile *.tmpl,*.htm,*.js inorea <buffer> cfun <c-r>=IMAP_PutTextWithMovement("function <++>(<++>) {\n<++>;\nreturn <++>;\n}")<cr>
   autocmd BufRead,BufNewFile *.tmpl,*.htm,*.js inorea <buffer> cfor <c-r>=IMAP_PutTextWithMovement("for(<++>; <++>; <++>) {\n<++>;\n}")<cr>
   autocmd BufRead,BufNewFile *.tmpl,*.htm,*.js inorea <buffer> cif <c-r>=IMAP_PutTextWithMovement("if(<++>) {\n<++>;\n}")<cr>
   autocmd BufRead,BufNewFile *.tmpl,*.htm,*.js inorea <buffer> cifelse <c-r>=IMAP_PutTextWithMovement("if(<++>) {\n<++>;\n}\nelse {\n<++>;\n}")<cr>


   """""""""""""""""""""""""""""""
   " => HTML
   """""""""""""""""""""""""""""""
   autocmd BufRead,BufNewFile *.tmpl,*.htm inorea <buffer> cahref <c-r>=IMAP_PutTextWithMovement('<a href="<++>"><++></a>')<cr>
   autocmd BufRead,BufNewFile *.tmpl,*.htm inorea <buffer> cbold <c-r>=IMAP_PutTextWithMovement('<b><++></b>')<cr>
   autocmd BufRead,BufNewFile *.tmpl,*.htm inorea <buffer> cimg <c-r>=IMAP_PutTextWithMovement('<img src="<++>" alt="<++>" />')<cr>
   autocmd BufRead,BufNewFile *.tmpl,*.htm inorea <buffer> cpara <c-r>=IMAP_PutTextWithMovement('<p><++></p>')<cr>
   autocmd BufRead,BufNewFile *.tmpl,*.htm inorea <buffer> ctag <c-r>=IMAP_PutTextWithMovement('<<++>><++></<++>>')<cr>
   autocmd BufRead,BufNewFile *.tmpl,*.htm inorea <buffer> ctag1 <c-r>=IMAP_PutTextWithMovement("<<++>><cr><++><cr></<++>>")<cr>


   """""""""""""""""""""""""""""""
   " => Java
   """""""""""""""""""""""""""""""
   autocmd BufRead,BufNewFile *.java inorea <buffer> cfun <c-r>=IMAP_PutTextWithMovement("public <++> <++>(<++>) {\n<++>;\nreturn <++>;\n}")<cr>
   autocmd BufRead,BufNewFile *.java inorea <buffer> cfunpr <c-r>=IMAP_PutTextWithMovement("private <++> <++>(<++>) {\n<++>;\nreturn <++>;\n}")<cr>
   autocmd BufRead,BufNewFile *.java inorea <buffer> cfor <c-r>=IMAP_PutTextWithMovement("for(<++>; <++>; <++>) {\n<++>;\n}")<cr>
   autocmd BufRead,BufNewFile *.java inorea <buffer> cif <c-r>=IMAP_PutTextWithMovement("if(<++>) {\n<++>;\n}")<cr>
   autocmd BufRead,BufNewFile *.java inorea <buffer> cifelse <c-r>=IMAP_PutTextWithMovement("if(<++>) {\n<++>;\n}\nelse {\n<++>;\n}")<cr>

   autocmd BufRead,BufNewFile *.tmpl,*.js,*.htm inoremap $r return

   "Presse c-q insted of space (or other key) to complete the snippet
   imap <C-q> <C-]>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Cope
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"For Cope
map <silent> <leader><cr> :noh<cr>

"Orginal for all
"map <leader>n :cn<cr>
"map <leader>p :cp<cr>
"map <leader>c :botright cw 10<cr>
"map <c-u> <c-l><c-j>:q<cr>:botright cw 10<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => MISC
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Remove the Windows ^M
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

"Paste toggle - when pasting something in, don't indent.
set pastetoggle=<F3>

"Remove indenting on empty lines
map <F2> :%s/\s*$//g<cr>:noh<cr>''

"Super paste
inoremap <C-v> <esc>:set paste<cr>mui<C-R>+<esc>mv'uV'v=:set nopaste<cr>

"A function that inserts links & anchors on a TOhtml export.
" Notice:
" Syntax used is:
"   *> Link
"   => Anchor
function! SmartTOHtml()
   TOhtml
   try
    %s/&quot;\s\+\*&gt; \(.\+\)</" <a href="#\1" style="color: cyan">\1<\/a></g
    %s/&quot;\(-\|\s\)\+\*&gt; \(.\+\)</" \&nbsp;\&nbsp; <a href="#\2" style="color: cyan;">\2<\/a></g
    %s/&quot;\s\+=&gt; \(.\+\)</" <a name="\1" style="color: #fff">\1<\/a></g
   catch
   endtry
   exe ":write!"
   exe ":bd"
endfunction

function! IsCodeFile()
    let fext = expand("%:e")
    return fext == "cpp" || fext == "cxx" || fext == "c" || fext == "hxx" || fext == "h" || fext == "cs" || fext == "java"
endfunction

function! MatchCurlyBrace()
    imap { {
    exe "normal a{ "
    let elesyn = synIDtrans(synID(line("."), col(".") -1, 0))
    if IsCodeFile()
        if ( elesyn != hlID('Comment') && elesyn != hlID('Constant') && match(getline("."),"\\<new\\>") < 0 && match(getline("."),"=") < 0 )
            exe "normal a}"
            exe "normal i\<CR>"
            exe "normal O"
        else
            exe "normal i "
        endif
    else
        exe "normal i "
    endif
    imap <silent> { <ESC>:call MatchCurlyBrace()<CR>cl
endfunction

" Very dump way to automatically insert closing }
imap <silent> { <ESC>:call MatchCurlyBrace()<CR>cl
map  <silent> <F3> /\/\*++<CR>zf/--\*\/<CR>zfj<CR>:noh<CR>
map  <silent> <F4> /{<CR>zf%<CR>:noh<CR>
map  <silent> <F8> :buffers<CR>


map <leader>l :ls<CR>

map <leader>d :bd<CR>
map <leader>w :w!<CR>
map <leader>n :bn<cr>
map <leader>p :bp<cr>
map <leader>q :wq!<cr>
map <leader>h :hid<cr>
map <leader>r :Redo<cr>
map <leader>c :pclose<cr>

" shortcuts to switch between buffers quickly
:map <leader>0 :b0<cr>
:map <leader>1 :b1<cr>
:map <leader>2 :b2<cr>
:map <leader>3 :b3<cr>
:map <leader>4 :b4<cr>
:map <leader>5 :b5<cr>
:map <leader>6 :b6<cr>
:map <leader>7 :b7<cr>
:map <leader>8 :b8<cr>
:map <leader>9 :b9<cr>

imap <C-L> <C-X><C-L>

au Bufenter *.hs compiler ghc
syntax on

